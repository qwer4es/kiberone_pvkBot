# bot.py
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import sqlite3
import os
import threading
from flask import Flask

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_ID_STR = os.getenv("ADMIN_ID")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ADMIN_ID –≤ int —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
ADMIN_ID = None
if ADMIN_ID_STR:
    try:
        ADMIN_ID = int(ADMIN_ID_STR)
    except ValueError:
        print(f"Warning: ADMIN_ID '{ADMIN_ID_STR}' is not a valid integer")
        ADMIN_ID = None

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    raise ValueError("TELEGRAM_TOKEN environment variable is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('applications.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS applications (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    child_name TEXT,
    child_age_range TEXT,
    parent_name TEXT,
    parent_phone TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ApplicationStates(StatesGroup):
    child_name = State()
    child_age_range = State()
    parent_name = State()
    parent_phone = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ")]],
        resize_keyboard=True)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ KiberOne.",
        reply_markup=keyboard)


# –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
async def start_application(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:")
    await state.set_state(ApplicationStates.child_name)


# –ò–º—è —Ä–µ–±—ë–Ω–∫–∞
@dp.message(ApplicationStates.child_name)
async def process_child_name(message: Message, state: FSMContext):
    await state.update_data(child_name=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="6-8 –ª–µ—Ç", callback_data="age_6_8")
    ], [
        InlineKeyboardButton(text="9-11 –ª–µ—Ç", callback_data="age_9_11")
    ], [InlineKeyboardButton(text="12-14 –ª–µ—Ç", callback_data="age_12_14")]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–±–µ–Ω–∫–∞:",
                         reply_markup=keyboard)
    await state.set_state(ApplicationStates.child_age_range)


# –í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.callback_query(F.data.startswith("age"), ApplicationStates.child_age_range)
async def process_age_callback(callback_query: CallbackQuery,
                               state: FSMContext):
    if callback_query.data:
        parts = callback_query.data.split("_")
        if len(parts) >= 3:
            age_range = f"{parts[1]}-{parts[2]}"
            await callback_query.answer()
            await state.update_data(child_age_range=age_range)

            builder = ReplyKeyboardBuilder()
            builder.add(
                KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
            builder.adjust(1)

            if callback_query.message:
                await callback_query.message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
                    reply_markup=builder.as_markup(resize_keyboard=True,
                                                   one_time_keyboard=True))
            await state.set_state(ApplicationStates.parent_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(ApplicationStates.parent_name)
async def process_parent_name_or_contact(message: Message, state: FSMContext):
    if message.contact:
        parent_name = message.contact.first_name or "–†–æ–¥–∏—Ç–µ–ª—å"
        parent_phone = message.contact.phone_number
        await state.update_data(parent_name=parent_name,
                                parent_phone=parent_phone)
    else:
        parent_name = message.text
        await state.update_data(parent_name=parent_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è:")
        await state.set_state(ApplicationStates.parent_phone)
        return

    await save_application(message, state)


# –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(ApplicationStates.parent_phone)
async def process_parent_phone(message: Message, state: FSMContext):
    await state.update_data(parent_phone=message.text)
    await save_application(message, state)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
async def save_application(message: Message, state: FSMContext):
    user_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    cursor.execute(
        '''
    INSERT INTO applications (child_name, child_age_range, parent_name, parent_phone)
    VALUES (?, ?, ?, ?)
    ''', (user_data['child_name'], user_data['child_age_range'],
          user_data['parent_name'], user_data['parent_phone']))
    conn.commit()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        f"–†–µ–±—ë–Ω–æ–∫: {user_data['child_name']}, –í–æ–∑—Ä–∞—Å—Ç: {user_data['child_age_range']}\n"
        f"–†–æ–¥–∏—Ç–µ–ª—å: {user_data['parent_name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['parent_phone']}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if CHANNEL_ID:
        try:
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n"
                f"üë§ –†–µ–±—ë–Ω–æ–∫: {user_data['child_name']}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user_data['child_age_range']} –ª–µ—Ç\n"
                f"üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å: {user_data['parent_name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['parent_phone']}",
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

    await state.clear()


# ================
# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# ================


@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if not ADMIN_ID or not message.from_user or message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute("SELECT COUNT(*) FROM applications")
    total = cursor.fetchone()[0]

    cursor.execute(
        "SELECT child_name, child_age_range, parent_name, parent_phone FROM applications ORDER BY id DESC LIMIT 10"
    )
    applications = cursor.fetchall()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏",
                                 callback_data="admin_view_all")
        ],
                         [
                             InlineKeyboardButton(
                                 text="–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                                 callback_data="admin_download_db")
                         ]])

    response = f"üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
    response += f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{total}</b>\n\n"
    if applications:
        response += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫:</b>\n"
        for app in applications:
            response += f"üîπ {app[0]} ({app[1]} –ª–µ—Ç) ‚Äî {app[2]}, {app[3]}\n"
    else:
        response += "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫."

    await message.answer(response, reply_markup=keyboard, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query(F.data == "admin_view_all")
async def admin_view_all(callback_query: CallbackQuery):
    if not ADMIN_ID or not callback_query.from_user or callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    cursor.execute(
        "SELECT child_name, child_age_range, parent_name, parent_phone FROM applications ORDER BY id DESC"
    )
    apps = cursor.fetchall()

    if not apps:
        if callback_query.message:
            await callback_query.message.answer("üì≠ –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏.")
        await callback_query.answer()
        return

    message_text = "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
    for i, app in enumerate(apps, 1):
        message_text += f"{i}. {app[0]} ({app[1]} –ª–µ—Ç) ‚Äî {app[2]}, {app[3]}\n"

    # –†–∞–∑–±–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(message_text) > 4096:
        parts = [
            message_text[i:i + 4000] for i in range(0, len(message_text), 4000)
        ]
        for part in parts:
            if callback_query.message:
                await callback_query.message.answer(part, parse_mode="HTML")
    else:
        if callback_query.message:
            await callback_query.message.answer(message_text, parse_mode="HTML")

    await callback_query.answer()


@dp.callback_query(F.data == "admin_download_db")
async def admin_download_db(callback_query: CallbackQuery):
    if not ADMIN_ID or not callback_query.from_user or callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        if callback_query.message:
            with open('applications.db', 'rb') as db_file:
                await callback_query.message.answer_document(document=db_file)
        await callback_query.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_flask, daemon=True).start()
# === –ö–û–ù–ï–¶ –í–ï–ë-–°–ï–†–í–ï–†–ê ===
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import asyncio
    asyncio.run(dp.start_polling(bot))
